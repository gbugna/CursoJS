{"version":3,"sources":["firebase.js","components/RecipeForm.js","components/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","RecipeForm","props","initialStateValues","recipeName","category","rating","method","useState","values","setValues","handleInputChange","e","target","name","value","className","onSubmit","preventDefault","addEditRecipe","type","id","placeholder","onChange","min","max","RecipeList","recipe","a","collection","doc","set","console","log","getRecipeList","get","querySnapshot","docs","forEach","data","push","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAiBeA,G,MADFC,IAASC,cAVC,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAIYC,a,4CC6DRC,EA5EI,SAACC,GAClB,IAAMC,EAAqB,CACzBC,WAAY,GACZC,SAAU,GACVC,OAAQ,GACRC,OAAQ,IALkB,EAQAC,mBAASL,GART,mBAQrBM,EARqB,KAQbC,EARa,KAUtBC,EAAoB,SAACC,GAAO,IAAD,EACPA,EAAEC,OAAlBC,EADuB,EACvBA,KAAMC,EADiB,EACjBA,MACdL,EAAU,2BAAKD,GAAN,kBAAeK,EAAOC,MASjC,OACE,yBAAKC,UAAU,kBACb,0BAAMC,SARW,SAACL,GACpBA,EAAEM,iBACFhB,EAAMiB,cAAcV,GACpBC,EAAU,eAAKP,MAMX,2BACEiB,KAAK,OACLJ,UAAU,+IACVF,KAAK,aACLO,GAAG,aACHC,YAAY,sBACZC,SAAUZ,EACVI,MAAON,EAAOL,aAGhB,2BACEgB,KAAK,OACLJ,UAAU,8IACVF,KAAK,WACLO,GAAG,WACHC,YAAY,YACZC,SAAUZ,EACVI,MAAON,EAAOJ,WAGhB,2BACEe,KAAK,SACLJ,UAAU,8IACVQ,IAAI,IACJC,IAAI,KACJX,KAAK,SACLO,GAAG,SACHC,YAAY,UACZC,SAAUZ,EACVI,MAAON,EAAOH,SAGhB,8BACEU,UAAU,oEACVF,KAAK,SACLO,GAAG,SACHC,YAAY,cACZC,SAAUZ,EACVI,MAAON,EAAOF,SAGhB,4BACEa,KAAK,SACLJ,UAAU,iIAFZ,cC7BOU,EAjCI,WACjB,IAAMP,EAAa,uCAAG,WAAOQ,GAAP,SAAAC,EAAA,sEAEdtC,EAAGuC,WAAW,cAAcC,MAAMC,IAAIJ,GAFxB,OAGpBK,QAAQC,IAAI,mBACZC,IAJoB,2CAAH,sDADI,EAQC1B,mBAAS,IARV,mBAUjB0B,GAViB,UAUJ,uCAAG,8BAAAN,EAAA,sEACQtC,EAAGuC,WAAW,cAAcM,MADpC,OACdC,EADc,OAEdC,EAAO,GACbD,EAAcE,SAAQ,SAAAR,GACpBE,QAAQC,IAAIH,EAAIS,OAAQT,EAAIT,IAC5BgB,EAAKG,KAAL,2BAAcV,EAAIS,QAAlB,IAA0BlB,GAAGS,EAAIT,MACjCW,QAAQC,IAAII,MANM,2CAAH,sDAenB,OAJAI,qBAAU,WACRP,MACC,IAGD,6BACE,kBAAC,EAAD,CAAYf,cAAeA,IAC3B,yCCrBSuB,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.25d4734d.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAVzRjYJCr21AANopk19lZ0EnDEi6FUgJk\",\r\n    authDomain: \"react-firebase-a7d84.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-a7d84.firebaseio.com\",\r\n    projectId: \"react-firebase-a7d84\",\r\n    storageBucket: \"react-firebase-a7d84.appspot.com\",\r\n    messagingSenderId: \"463784983108\",\r\n    appId: \"1:463784983108:web:7ef3895299001c548ada11\"\r\n  };\r\n  // Initialize Firebase\r\n  const fb = firebase.initializeApp(firebaseConfig);\r\n  export const db = fb.firestore();","import React, { useState } from \"react\";\r\n\r\nconst RecipeForm = (props) => {\r\n  const initialStateValues = {\r\n    recipeName: \"\",\r\n    category: \"\",\r\n    rating: \"\",\r\n    method: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.addEditRecipe(values);\r\n    setValues({ ...initialStateValues });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\" m-2 shadow appearance-none block w-full border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n          name=\"recipeName\"\r\n          id=\"recipeName\"\r\n          placeholder=\"Nombre de la receta\"\r\n          onChange={handleInputChange}\r\n          value={values.recipeName}\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          className=\"m-2 shadow appearance-none block w-full border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n          name=\"category\"\r\n          id=\"category\"\r\n          placeholder=\"Categoria\"\r\n          onChange={handleInputChange}\r\n          value={values.category}\r\n        />\r\n\r\n        <input\r\n          type=\"number\"\r\n          className=\"m-2 shadow appearance-none block w-full border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n          min=\"1\"\r\n          max=\"10\"\r\n          name=\"rating\"\r\n          id=\"rating\"\r\n          placeholder=\"Puntaje\"\r\n          onChange={handleInputChange}\r\n          value={values.rating}\r\n        />\r\n\r\n        <textarea\r\n          className=\"m-2 resize border rounded focus:outline-none focus:shadow-outline\"\r\n          name=\"method\"\r\n          id=\"method\"\r\n          placeholder=\"Preparacion\"\r\n          onChange={handleInputChange}\r\n          value={values.method}\r\n        />\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-orange-500 hover:bg-orange-400 text-white font-bold py-2 px-4 border-b-4 border-orange-700 hover:border-orange-500 rounded\"\r\n        >\r\n          Guardar\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RecipeForm from \"./RecipeForm\";\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nconst RecipeList = () => {\r\n  const addEditRecipe = async (recipe) => {\r\n    //console.log(recipe);\r\n    await db.collection(\"recipeList\").doc().set(recipe);\r\n    console.log(\"Receta Guardada\");\r\n    getRecipeList();\r\n  };\r\n\r\n  const [list, setList] = useState([]);\r\n\r\n  const getRecipeList = async () => {\r\n    const querySnapshot = await db.collection(\"recipeList\").get();\r\n    const docs = [];\r\n    querySnapshot.forEach(doc => {\r\n      console.log(doc.data(), doc.id);\r\n      docs.push({...doc.data(), id:doc.id})\r\n      console.log(docs);\r\n    });\r\n    \r\n  };\r\n\r\n  useEffect(() => {\r\n    getRecipeList();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <RecipeForm addEditRecipe={addEditRecipe} />\r\n      <h1>Recetas</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./firebase\";\nimport RecipeList from \"./components/RecipeList\";\nfunction App() {\n  return (\n    <>\n      <RecipeList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}